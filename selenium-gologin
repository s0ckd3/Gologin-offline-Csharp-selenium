using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Net;
using System.Net.Http;
using System.Net.Sockets;
using System.Threading.Tasks;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
using OpenQA.Selenium;
using OpenQA.Selenium.Chrome;
using OpenQA.Selenium.Remote;

namespace Main
{
    class Program
    {
        static async Task Main(string[] args)
        {
            string tmpdir = @"E:\\noproxy"; // Thay đổi thư mục chứa profiles
            string address = "127.0.0.1";
            List<string> extraParams = new List<string>
            {
                "--disable-site-isolation-trials"
            };
            bool local = false;
            bool credentialsEnableService = false;

            Product starts = new Product(tmpdir, address, extraParams, local, credentialsEnableService);
            string proxyData = null;
            List<string> proxyDataList = new List<string>(); // Bỏ comment dòng này nếu bạn không có dữ liệu proxy

            if (proxyDataList.Count > 0)
            {
                proxyData = proxyDataList[0]; // Chọn proxy đầu tiên nếu có
            }

            string profileId = "00167110699377194117"; // Thay đổi tên Profile ở đây
            starts.SetProfileId(profileId);

            if (!string.IsNullOrEmpty(proxyData))
            {
                starts.ChangeProxy(proxyData);
                starts.Update(profileId);
            }

            Console.WriteLine("Profile start: " + profileId);
            Console.WriteLine("Proxy start: " + proxyData);
            string debuggerAddress = starts.Start();
            Console.WriteLine(debuggerAddress);
            // Đặt đường dẫn của ChromeDriver tùy chỉnh
            string chromeDriverPath = @"C:\Users\s0ckd\OneDrive\Desktop\gologin-demo\chromedriver-win32\chromedriver.exe";

            // Tạo ChromeOptions và đặt giá trị debuggerAddress
            ChromeOptions chromeOptions = new ChromeOptions();
            chromeOptions.DebuggerAddress = debuggerAddress;

            // Khởi tạo ChromeDriver với ChromeOptions
            IWebDriver driver = new ChromeDriver(chromeDriverPath, chromeOptions);

            driver.Navigate().GoToUrl("https://accounts.google.com/ServiceLogin?hl=vi");

        }
    }

    public class Product
    {
        public string Tmpdir { get; private set; }
        public string Address { get; private set; }
        public List<string> ExtraParams { get; private set; }
        public bool Local { get; private set; }
        public bool CredentialsEnableService { get; private set; }
        public string ProfilePath { get; private set; }
        public string ExecutablePath { get; private set; }
        public string Proxy { get; private set; }

        public Product(string tmpdir, string address, List<string> extraParams, bool local, bool credentialsEnableService)
        {
            Tmpdir = tmpdir;
            Address = address;
            ExtraParams = extraParams;
            Local = local;
            CredentialsEnableService = credentialsEnableService;
            ExecutablePath = "C:\\gologin\\browser\\orbita-browser\\chrome.exe"; // Thay đổi đường dẫn tới Chrome Browser ở đây
        }

        public void SetProfileId(string profileId)
        {
            ProfilePath = Path.Combine(Tmpdir, profileId);
        }

        public void ChangeProxy(string proxy)
        {
            if (!string.IsNullOrEmpty(proxy))
            {
                try
                {
                    string schema = string.Empty;
                    string host = string.Empty;
                    string port = string.Empty;
                    string username = string.Empty;
                    string password = string.Empty;

                    schema = proxy.Split("://")[0];
                    string[] proxyParts = proxy.Split("://")[1].Split(':');
                    if (proxyParts.Length == 2)
                    {
                        host = proxyParts[0];
                        port = proxyParts[1];
                    }
                    else if (proxyParts.Length == 4)
                    {
                        host = proxyParts[0];
                        port = proxyParts[1];
                        username = proxyParts[2];
                        password = proxyParts[3];
                    }

                    string preferencesPath = Path.Combine(ProfilePath, "Default", "Preferences");

                    if (File.Exists(preferencesPath))
                    {
                        string preferencesContent = File.ReadAllText(preferencesPath);
                        JObject preferences = JObject.Parse(preferencesContent);

                        if (preferences != null)
                        {
                            JObject proxyObject = new JObject();
                            proxyObject["id"] = null;
                            proxyObject["mode"] = schema;
                            proxyObject["host"] = host;
                            proxyObject["port"] = int.Parse(port);
                            proxyObject["username"] = username;
                            proxyObject["password"] = password;
                            proxyObject["changeIpUrl"] = "null";
                            proxyObject["autoProxyRegion"] = "us";
                            proxyObject["torProxyRegion"] = "us";

                            preferences["gologin"]["proxy"] = proxyObject;

                            File.WriteAllText(preferencesPath, preferences.ToString());
                        }
                    }
                }
                catch (Exception ex)
                {
                    Console.WriteLine(ex);
                }
            }
        }

        public void Update(string profileId)
        {
            TimeZoneInfo timeZoneInfo = GetTimeZone();

            if (timeZoneInfo != null)
            {
                ChangeTimeZone(timeZoneInfo);
            }
        }

        private TimeZoneInfo GetTimeZone()
        {
            string url = "https://time.gologin.com";
            string proxyUrl = FormatProxyUrlPassword(Proxy);

            HttpClient httpClient = GetHttpClient(proxyUrl);

            try
            {
                string response = httpClient.GetStringAsync(url).Result;
                dynamic timeZoneData = JsonConvert.DeserializeObject(response);

                if (timeZoneData != null)
                {
                    string timeZoneId = timeZoneData.timezone;
                    return TimeZoneInfo.FindSystemTimeZoneById(timeZoneId);
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex);
            }

            return null;
        }

        public string StartChrome()
        {
            // Khởi động Chrome với debug port
            string chromeExecutablePath = ExecutablePath;
            int ports = GetRandomPort();
            string chromeCommandLine = $"--remote-debugging-port={ports} " +
                $"--user-data-dir={ProfilePath} --password-store=basic --lang=en";

            if (!string.IsNullOrEmpty(Proxy))
            {
                string[] proxyParts = Proxy.Split(new string[] { "://" }, StringSplitOptions.None);
                if (proxyParts.Length == 2)
                {
                    string schema = proxyParts[0];
                    string[] proxyHostPort = proxyParts[1].Split(':');
                    if (proxyHostPort.Length == 2)
                    {
                        string proxyHost = proxyHostPort[0];
                        string proxyPort = proxyHostPort[1];

                        string hrRules = $"\"MAP * 0.0.0.0 , EXCLUDE {proxyHost}\"";
                        chromeCommandLine += $" --proxy-server={Proxy} --host-resolver-rules={hrRules}";
                    }
                }
            }

            foreach (var param in ExtraParams)
            {
                chromeCommandLine += $" {param}";
            }

            ProcessStartInfo startInfo = new ProcessStartInfo
            {
                FileName = chromeExecutablePath,
                Arguments = chromeCommandLine,
                CreateNoWindow = true,
                UseShellExecute = false
            };

            Process.Start(startInfo);

            // Chờ một thời gian ngắn để Chrome khởi động
            Task.Delay(5000).Wait(); // 5 seconds, bạn có thể điều chỉnh thời gian chờ tùy ý

            return $"{Address}:{ports}";
        }


        public string Start()
        {
            string url = StartChrome();
            int tryCount = 1;
 
            while (tryCount < 100)
            {
                try
                {
                    using (HttpClient httpClient = GetHttpClient(null))
                    {
                        var data = httpClient.GetStringAsync($"http://{url}/json").Result;
                        //Console.WriteLine(data);
                        break;
                    }
                }
                catch
                {
                    tryCount++;
                    Task.Delay(1000).Wait();
                }
            }

            return url;
        }

        public int GetRandomPort()
        {
            Random random = new Random();
            int port = random.Next(1000, 35000);
            using (TcpClient tcpClient = new TcpClient())
            {
                try
                {
                    tcpClient.Connect(Address, port);
                    return GetRandomPort();
                }
                catch
                {
                    return port;
                }
            }
        }

        private string FormatProxyUrlPassword(string proxy)
        {
            if (string.IsNullOrEmpty(proxy))
            {
                return string.Empty;
            }

            string[] proxyParts = proxy.Split(new string[] { "://" }, StringSplitOptions.None);
            if (proxyParts.Length == 2)
            {
                return proxyParts[0] + "://" + proxyParts[1];
            }
            else
            {
                return proxyParts[0] + "://" + proxyParts[2] + ":" + proxyParts[3] + "@" + proxyParts[1];
            }
        }

        public HttpClient GetHttpClient(string proxyUrl)
        {
            HttpClientHandler httpClientHandler = new HttpClientHandler();

            if (!string.IsNullOrEmpty(proxyUrl))
            {
                WebProxy webProxy = new WebProxy(proxyUrl);
                httpClientHandler.Proxy = webProxy;
            }

            HttpClient httpClient = new HttpClient(httpClientHandler);

            if (!string.IsNullOrEmpty(proxyUrl))
            {
                httpClient.DefaultRequestHeaders.Add("User-Agent", "gologin-api");
            }

            return httpClient;
        }

        private void ChangeTimeZone(TimeZoneInfo timeZoneInfo)
        {
            string preferencesPath = Path.Combine(ProfilePath, "Default", "Preferences");

            if (File.Exists(preferencesPath))
            {
                string preferencesContent = File.ReadAllText(preferencesPath);
                dynamic preferences = JsonConvert.DeserializeObject(preferencesContent);

                if (preferences != null)
                {
                    preferences.gologin.timezone.id = timeZoneInfo.Id;

                    File.WriteAllText(preferencesPath, JsonConvert.SerializeObject(preferences));
                }
            }
        }
    }
}
